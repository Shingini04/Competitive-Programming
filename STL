https://takeuforward.org/c/c-stl-tutorial-most-frequent-used-stl-containers/

algorithm
containers
functions
iterators


pair:

void explainPair(){

  pair<int, int> p1 = {1,3};
  cout << p.first << " " << p.second;

  pair<int, pair<int,int>> p2= {1,{1,3}};
  cout << p.first << " " << p.second.first << p.second.second;

  pair <int, int> arr[]={{1,3},{2,3}};
  cout << arr[1].first << arr[1].second;

}
-> we can go nested nested and store a lot more in pair.


vector:

  void explainVector(){
  vector<int> v;
  v.push_back(2);
  v.emplace_back(2); -> during pairs I don't have to put {} for emplace_back

vector<int> v(5,100); -> {100,100,100,100,100}

vector<int>:: iterator it=v.begin(); -> points at the address
cout << *(it);

vector<int> v2(v1) -> v2=v1 but not same address;

for(auto it= v.begin(); it<=v.end(); it++){
  cout<<*(it);
}

for( auto it : v){
  cout << it;
}

v.erase(v.begin()+1);
v.erase(v.begin(), v.begin()+3) -> (inclusive, exclusive);

v.insert(index, int);
v.insert(index, arr start, arr end);

v1.swap(v2) -> swap items of two vectors
v.clear();
v.empty() -> bool

}

void explainList(){
list<int> ls;
ls.push_back(2); //emplace_back
ls.push_front(3); //emplace_front
}
-> less costly that vector and has all vector functionalities


























